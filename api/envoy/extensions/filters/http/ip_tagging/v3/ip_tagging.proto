syntax = "proto3";

package envoy.extensions.filters.http.ip_tagging.v3;

import "envoy/config/core/v3/address.proto";
import "envoy/config/core/v3/config_source.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.ip_tagging.v3";
option java_outer_classname = "IpTaggingProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/ip_tagging/v3;ip_taggingv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: IP tagging]
// IP tagging :ref:`configuration overview <config_http_filters_ip_tagging>`.
// [#extension: envoy.filters.http.ip_tagging]

message IPTagging {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.filter.http.ip_tagging.v2.IPTagging";

  // The type of requests the filter should apply to. The supported types
  // are internal, external or both. The
  // :ref:`x-forwarded-for<config_http_conn_man_headers_x-forwarded-for_internal_origin>` header is
  // used to determine if a request is internal and will result in
  // :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
  // being set. The filter defaults to both, and it will apply to all request types.
  enum RequestType {
    // Both external and internal requests will be tagged. This is the default value.
    BOTH = 0;

    // Only internal requests will be tagged.
    INTERNAL = 1;

    // Only external requests will be tagged.
    EXTERNAL = 2;
  }

  // Supplies the IP tag name and the IP address subnets.
  message IPTag {
    option (udpa.annotations.versioning).previous_message_type =
        "envoy.config.filter.http.ip_tagging.v2.IPTagging.IPTag";

    // Specifies the IP tag name to apply.
    string ip_tag_name = 1;

    // A list of IP address subnets that will be tagged with
    // ip_tag_name. Both IPv4 and IPv6 are supported.
    repeated config.core.v3.CidrRange ip_list = 2;
  }

  // Configuration for an extension configuration discovery service with name.
  message DynamicConfig {
    // The name of the extension configuration. It also serves as a resource name in ExtensionConfigDS.
    string name = 1 [(validate.rules).string = {min_len: 1}];

    // Configuration source specifier for an extension configuration discovery
    // service. In case of a failure no ip tags will be applied to the request/response headers.
    config.core.v3.ExtensionConfigSource config_discovery = 2;
  }

  // The type of request the filter should apply to.
  RequestType request_type = 1 [(validate.rules).enum = {defined_only: true}];

  repeated IPTag ip_tags = 4 [(validate.rules).repeated = {min_items: 1}];

  // Dynamic configuration of ip_tags obtained via extension configuration discovery service.
  DynamicConfig dynamic_ip_tags = 5;
}
