syntax = "proto3";

package envoy.extensions.filters.http.geoip.v3;

import "google/protobuf/any.proto";

import "xds/annotations/v3/status.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.geoip.v3";
option java_outer_classname = "GeoipProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/geoip/v3;geoipv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;
option (xds.annotations.v3.file_status).work_in_progress = true;

// [#protodoc-title: Geoip]
// Geoip :ref:`configuration overview <config_http_filters_geoip>`.
// [#extension: envoy.filters.http.geoip]

message Geoip {

  // If set to true, the `xff_num_trusted_hops` field will be used to determine
  // trusted client address from `x-forwarded-for` header.
  // Otherwise, the immediate downstream connection source address will be used.
  bool use_xff = 1;

  // The number of additional ingress proxy hops from the right side of the
  // :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header to trust when
  // determining the origin client's IP address. The default is zero if this option
  // is not specified. See the documentation for
  // :ref:`config_http_conn_man_headers_x-forwarded-for` for more information.
  uint32 xff_num_trusted_hops = 2;

  // Configuration for geolocation headers to add to request.
  GeolocationHeadersToAdd geo_headers_to_add = 3 [(validate.rules).message = {required: true}];

  // Geolocation provider specific configuration.
  GeolocationProvider provider = 4 [(validate.rules).message = {required: true}];

  // The set of geolocation headers to add to request. If any of the configured headers is present
  // in the incoming request, it will be overridden by Geoip filter.
  message GeolocationHeadersToAdd {
    // If set, the header will be used to populate the country ISO code associated with the IP address.
    string country = 1 [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME ignore_empty: true}];
    // If set, the header will be used to populate the city associated with the IP address.
    string city = 2 [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME ignore_empty: true}];
    // If set, the header will be used to populate the region ISO code associated with the IP address.
    string region = 3 [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME ignore_empty: true}];
    // If set, the header will be used to populate the ASN associated with the IP address.
    string asn = 4 [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME ignore_empty: true}];
    // If set, the IP address will be checked if it belongs to any type of anonymization network (e.g. VPN, public proxy etc)
    // and header will be populated with the check result.
    string is_anon = 5 [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME ignore_empty: true}];
    // If set, the IP address will be checked if it belongs to a VPN and header will be populated with the check result.
    string anon_vpn = 6 [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME ignore_empty: true}];
    // If set, the IP address will be checked if it belongs to a hosting provider and header will be populated with the check result.
    string anon_hosting = 7 [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME ignore_empty: true}];
    // If set, the IP address will be checked if it belongs to a TOR exit node and header will be populated with the check result.
    string anon_tor = 8 [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME ignore_empty: true}];
    // If set, the IP address will be checked if it belongs to a public proxy and header will be populated with the check result.
    string anon_proxy = 9 [(validate.rules).string = {well_known_regex: HTTP_HEADER_NAME ignore_empty: true}];
  }

  message GeolocationProvider {
    // The name of the geoip driver to instantiate. The name must match a
    // supported geoip driver. Built-in drivers:
    //
    // - *envoy.extensions.geoip_providers.maxmind*
    string name = 1 [(validate.rules).string = {min_bytes: 1}];

    // Geoip driver specific configuration which depends on the driver being instantiated.
    // See the geoip drivers for examples:
    //
    // - :ref:`MaxMindConfig <envoy_api_msg_config.geoip.v3.MaxMindConfig>`
    // [#extension-category: envoy.geoip_providers]
    oneof config_type {
      google.protobuf.Any typed_config = 3;
    }
  }

}
